import $ from 'jquery';
import config from './config.js';
import AppAPI from './AppAPI';

/**
 * Class to interact with Facebook graph API
 */
export default class Facebook {
    /**
     * Connect the user with Facebook by redirection on their site
     *
     * @return {boolean} Return false to simulate a click
     */
    static connect () {
        window.location.href =
            // eslint-disable-next-line prefer-template
            config.facebook.siteRootUrl +
            '/dialog/oauth?client_id=' +
            config.facebook.appId +
            '&redirect_uri=' +
            config.facebook.redirectionUrl +
            '&response_type=token&scope=' +
            config.facebook.authorizations.join(',');

        return false;
    }

    /**
     * Get the given token information
     *
     * @param {string} token - The token to get the information from
     *
     * @return {Promise} A promise containing the Facebook API response
     */
    static async getTokenInfo (token) {
        const getAppAccessTokenResponse = await AppAPI.get(
            '/app/facebook/accessToken',
            {"personalToken": config.app.personalToken}
        );

        return Facebook.get(
            '/debug_token',
            {
                "input_token" : token,
                "access_token": getAppAccessTokenResponse.response.access_token
            }
        );
    }

    /**
     * Get the basic user information
     *
     * @param {string} facebookUserId - The Facebook user ID
     * @param {string} facebookAccessToken - The Facebook user access token
     *
     * @return {Promise.<facebookUserInfoResponse>} A promise containing the Facebook API response
     */
    static getUserInfo (facebookUserId, facebookAccessToken) {
        return Facebook.get(
            `/${facebookUserId}`,
            {"access_token": facebookAccessToken, "fields": config.facebook.requiredUserInfo.join(',')}
        );
    }

    /**
     * Get a long duration access token for the user
     *
     * @link https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile
     *
     * @param {string} code - The code generated by the app with a long access token
     *
     * @return {Promise} A promise containing the Facebook API response
     */
    static getLongDurationAccessToken (code) {
        return Facebook.get(
            '/oauth/access_token',
            {
                "client_id"   : config.facebook.appId,
                code,
                "redirect_uri": config.facebook.redirectionUrl
            }
        );
    }

    /**
     * Shorthand method to call a GET app API request
     *
     * @param {string } route - The API route
     * @param {Object} [params={}] - The request params OPTIONAL
     *
     * @return {Promise} The XHR jQuery Promise
     */
    static get (route, params = {}) {
        return this.request('GET', route, params);
    }

    /**
     * Shorthand method to call a POST app API request
     *
     * @param {string} route - The API route
     * @param {Object} [params={}] - The request params OPTIONAL
     *
     * @return {Promise} The XHR jQuery Promise
     */
    static post (route, params = {}) {
        return this.request('POST', route, params);
    }

    /**
     * Utility method to call a POST or GET app API request
     *
     * @param {string} type - The type of the request ('POST' or 'GET')
     * @param {string} route - The API route
     * @param {Object} params - The request params
     *
     * @return {Promise} The XHR jQuery Promise
     */
    static request (type, route, params) {
        return $.ajax(
            {
                "url"     : config.facebook.apiRootUrl + route,
                "method"  : type,
                "data"    : params,
                "dataType": "json"
            }
        ).promise();
    }
}
